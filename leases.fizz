NUM_PROCESSES = 2
LEASE_LENGTH = 10


always assertion MutualExclusion:
    for p1 in processes:
        for p2 in processes:
            if  p1.state == STATE.CRITICAL_SECTION \
            and p2.state == STATE.CRITICAL_SECTION \
            and p1 != p2:
                return False
    return True

atomic action AdvanceClock:
    inc = any [1,2,3]
    now = now + inc

STATE = enum('READY', 'ACQUIRED', 'CRITICAL_SECTION')

role Process:
    action Init:
        self.state = STATE.READY

    atomic action Acquire:
        require self.state == STATE.READY
        require lock.owner == None or now>=lock.expiration_time
        self.state = STATE.ACQUIRED
        lock = record(owner=self.__id__, expiration_time=now+LEASE_LENGTH)

    action CriticalSection:
        atomic:
            require self.state == STATE.ACQUIRED
            self.state = STATE.CRITICAL_SECTION

        pass  # this represents being in the critical section

        atomic:
            self.state = 'READY'
            # release the lock
            if lock.owner == self.__id__:
                lock.owner = None


action Init:
    processes = []
    # global clock
    now = 0
    lock = record(owner=None, expiration_time=-1)
    for i in range(0, NUM_PROCESSES):
        processes.append(Process())
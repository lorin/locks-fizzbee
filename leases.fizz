NUM_PROCESSES = 2
LEASE_LENGTH = 10


always assertion MutualExclusion:
    for p1 in processes:
        for p2 in processes:
            if p1.in_cs and p2.in_cs and p1!=p2:
                return False
    return True

atomic action AdvanceClock:
    clock = clock + 1

role Process:
    action Init:
        self.in_cs = False

    action Next:
        atomic:
            require lock.owner == None or clock>=lock.expiration_time
            lock = record(owner=self.__id__, expiration_time=clock+LEASE_LENGTH)

        # check we still have the lock before entering the criticla section
        # if we don't have it, we'll just exit this and start over
        if lock.owner == self.__id__:
            # critical section
            self.in_cs = True

            pass  # this represents the actual critical section

            # after critical section
            self.in_cs = False

            # release the lock
            if lock.owner == self.__id__:
                lock.owner = None


action Init:
    processes = []
    # global clock
    clock = 0
    lock = record(owner=None, expiration_time=-1)
    for i in range(0, NUM_PROCESSES):
        processes.append(Process())
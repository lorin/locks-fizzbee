always assertion MutualExclusion:
    return not any([p1.in_cs and p2.in_cs for t1 in threads
                                          for t2 in threads
                                          if t1 != t2])

NUM_THREADS = 2

role Thread:
    action Init:
        self.in_cs = False

    action Next:
        # before critical section
        pass

        # acquire lock
        atomic:
            require not lock or self.__id__ in lock
            lock.add(self.__id__)

        #
        # critical section
        #
        self.in_cs = True
        pass
        self.in_cs = False

        # release lock
        lock.clear()

action Init:
    threads = []
    lock = set()
    in_cs = set()
    for i in range(NUM_THREADS):
        processes.append(Thread())
